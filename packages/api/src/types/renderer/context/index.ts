import * as storage from '@fe/utils/storage';
import * as utils from '@fe/utils/index';
import { showPremium } from '@fe/others/premium';
import * as extension from '@fe/others/extension';
import * as ioc from '@fe/core/ioc';
import * as plugin from '@fe/core/plugin';
import * as hook from '@fe/core/hook';
import * as action from '@fe/core/action';
import * as keybinding from '@fe/core/keybinding';
import { useToast } from '@fe/support/ui/toast';
import { useModal } from '@fe/support/ui/modal';
import { useQuickFilter } from '@fe/support/ui/quick-filter';
import { useFixedFloat } from '@fe/support/ui/fixed-float';
import { useContextMenu } from '@fe/support/ui/context-menu';
import * as env from '@fe/support/env';
import * as base from '@fe/services/base';
import * as workbench from '@fe/services/workbench';
import * as api from '@fe/support/api';
import * as embed from '@fe/support/embed';
import * as args from '@fe/support/args';
import * as doc from '@fe/services/document';
import * as view from '@fe/services/view';
import * as tree from '@fe/services/tree';
import * as markdown from '@fe/services/markdown';
import * as statusBar from '@fe/services/status-bar';
import * as layout from '@fe/services/layout';
import * as editor from '@fe/services/editor';
import * as theme from '@fe/services/theme';
import * as setting from '@fe/services/setting';
import * as i18n from '@fe/services/i18n';
import * as runner from '@fe/services/runner';
import * as renderer from '@fe/services/renderer';
import * as exportDoc from '@fe/services/export';
import * as routines from '@fe/services/routines';
import * as directives from '@fe/directives/index';
import * as indexer from '@fe/services/indexer';
import * as repo from '@fe/services/repo';
import * as lib from './lib';
import * as components from './components';
declare const ctx: Readonly<{
    lib: typeof lib;
    components: typeof components;
    directives: typeof directives;
    ioc: typeof ioc;
    base: typeof base;
    api: typeof api;
    args: typeof args;
    store: {
        state: {
            tree: {
                mtime?: number | undefined;
                birthtime?: number | undefined;
                marked?: boolean | undefined;
                children?: any[] | undefined;
                level: number;
                name: string;
                repo: string;
                path: string;
                type: "file" | "dir";
            }[] | null;
            treeSort: {
                by: "mtime" | "birthtime" | "name" | "serial";
                order: "asc" | "desc";
            };
            wordWrap: "on" | "off";
            typewriterMode: boolean;
            showSide: boolean;
            showView: boolean;
            showEditor: boolean;
            editorPreviewExclusive: boolean;
            showXterm: boolean;
            showOutline: boolean;
            autoPreview: boolean;
            syncScroll: boolean;
            showSetting: boolean;
            showExport: boolean;
            presentation: boolean;
            isFullscreen: boolean;
            currentContent: string;
            inComposition: boolean;
            currentRepo: {
                name: string;
                path: string;
                enableIndexing: boolean;
            } | undefined;
            currentRepoIndexStatus: {
                repo: string;
                status: {
                    total: number;
                    indexed: number;
                    processing: string | null;
                    cost: number;
                    ready: boolean;
                };
            } | null;
            currentFile: {
                type: "file" | "dir";
                name: string;
                content?: string | undefined;
                title?: string | undefined;
                passwordHash?: string | undefined;
                contentHash?: string | undefined;
                stat?: {
                    mtime: number;
                    birthtime: number;
                    size: number;
                } | undefined;
                writeable?: boolean | undefined;
                status?: ("loaded" | "save-failed" | "saved" | "unsaved") | undefined;
                absolutePath?: string | undefined;
                plain?: boolean | undefined;
                repo: string;
                path: string;
            } | null | undefined;
            recentOpenTime: Record<string, number>;
            tabs: {
                payload: {
                    file: {
                        type: "file" | "dir";
                        name: string;
                        content?: string | undefined;
                        title?: string | undefined;
                        passwordHash?: string | undefined;
                        contentHash?: string | undefined;
                        stat?: {
                            mtime: number;
                            birthtime: number;
                            size: number;
                        } | undefined;
                        writeable?: boolean | undefined;
                        status?: ("loaded" | "save-failed" | "saved" | "unsaved") | undefined;
                        absolutePath?: string | undefined;
                        plain?: boolean | undefined;
                        repo: string;
                        path: string;
                    } | null;
                };
                key: string;
                label: string;
                description?: string | undefined;
                fixed?: boolean | undefined;
                temporary?: boolean | undefined;
                class?: string | undefined;
            }[];
            previewer: string;
            editor: string;
        };
        watch: typeof lib.vue.watch;
        watchEffect: typeof lib.vue.watchEffect;
        getters: {
            isSaved: lib.vue.ComputedRef<boolean>;
        };
    };
    action: typeof action;
    doc: typeof doc;
    keybinding: typeof keybinding;
    tree: typeof tree;
    workbench: typeof workbench;
    markdown: typeof markdown;
    statusBar: typeof statusBar;
    runner: typeof runner;
    renderer: typeof renderer;
    layout: typeof layout;
    editor: typeof editor;
    view: typeof view;
    theme: typeof theme;
    storage: typeof storage;
    embed: typeof embed;
    setting: typeof setting;
    i18n: typeof i18n;
    env: typeof env;
    utils: typeof utils;
    routines: typeof routines;
    indexer: typeof indexer;
    repo: typeof repo;
    export: typeof exportDoc;
    ui: {
        useToast: typeof useToast;
        useModal: typeof useModal;
        useQuickFilter: typeof useQuickFilter;
        useFixedFloat: typeof useFixedFloat;
        useContextMenu: typeof useContextMenu;
    };
    registerHook: typeof hook.registerHook;
    removeHook: typeof hook.removeHook;
    triggerHook: typeof hook.triggerHook;
    showPremium: typeof showPremium;
    getPremium: () => boolean;
    showExtensionManager: typeof extension.showManager;
    getExtensionLoadStatus: typeof extension.getLoadStatus;
    getExtensionInitialized: typeof extension.getInitialized;
    getPluginApi: typeof plugin.getApi;
    version: string;
}>;
export type Ctx = typeof ctx;
export type Plugin = plugin.Plugin<Ctx>;
export default ctx;
